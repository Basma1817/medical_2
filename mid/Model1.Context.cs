//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace mid
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ICDBTrdAEntities : DbContext
    {
        public ICDBTrdAEntities()
            : base("name=ICDBTrdAEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ActivityTypes> ActivityTypes { get; set; }
        public virtual DbSet<ActivSetup> ActivSetup { get; set; }
        public virtual DbSet<AgeBalance> AgeBalance { get; set; }
        public virtual DbSet<AstCity> AstCity { get; set; }
        public virtual DbSet<AstCompany> AstCompany { get; set; }
        public virtual DbSet<AstDprtmnt> AstDprtmnt { get; set; }
        public virtual DbSet<Astsupctg> Astsupctg { get; set; }
        public virtual DbSet<dtproperties> dtproperties { get; set; }
        public virtual DbSet<FixAsetsCat> FixAsetsCat { get; set; }
        public virtual DbSet<FixdAsetsLoc> FixdAsetsLoc { get; set; }
        public virtual DbSet<FixdAsetstype> FixdAsetstype { get; set; }
        public virtual DbSet<FixdAstSalDep> FixdAstSalDep { get; set; }
        public virtual DbSet<FixdAstStatus> FixdAstStatus { get; set; }
        public virtual DbSet<FixdDepStat> FixdDepStat { get; set; }
        public virtual DbSet<GLAnalytical1> GLAnalytical1 { get; set; }
        public virtual DbSet<GLAnalytical2> GLAnalytical2 { get; set; }
        public virtual DbSet<GLAstAcnBnk> GLAstAcnBnk { get; set; }
        public virtual DbSet<GLAstAcntyp> GLAstAcntyp { get; set; }
        public virtual DbSet<GLAstbank> GLAstbank { get; set; }
        public virtual DbSet<GLAstinvAdj> GLAstinvAdj { get; set; }
        public virtual DbSet<GLAstJrntyp> GLAstJrntyp { get; set; }
        public virtual DbSet<GLjrnal> GLjrnal { get; set; }
        public virtual DbSet<GLjrntrs> GLjrntrs { get; set; }
        public virtual DbSet<GlLast> GlLast { get; set; }
        public virtual DbSet<GLMonth> GLMonth { get; set; }
        public virtual DbSet<Glprvyer> Glprvyer { get; set; }
        public virtual DbSet<HrAstdeductntyp> HrAstdeductntyp { get; set; }
        public virtual DbSet<HrAstDeprtmnt> HrAstDeprtmnt { get; set; }
        public virtual DbSet<HrAstEmpstu> HrAstEmpstu { get; set; }
        public virtual DbSet<HrAstErngtyp> HrAstErngtyp { get; set; }
        public virtual DbSet<HrAstJobtbl> HrAstJobtbl { get; set; }
        public virtual DbSet<HrAstPymntype> HrAstPymntype { get; set; }
        public virtual DbSet<HrAstReljan> HrAstReljan { get; set; }
        public virtual DbSet<HrAstReqtyp> HrAstReqtyp { get; set; }
        public virtual DbSet<HrAststate> HrAststate { get; set; }
        public virtual DbSet<InvAstCardTyp> InvAstCardTyp { get; set; }
        public virtual DbSet<InvAstCntry> InvAstCntry { get; set; }
        public virtual DbSet<InvAstcPayType> InvAstcPayType { get; set; }
        public virtual DbSet<InvAstCurncy> InvAstCurncy { get; set; }
        public virtual DbSet<InvAstCustmcatg> InvAstCustmcatg { get; set; }
        public virtual DbSet<InvAstMarket> InvAstMarket { get; set; }
        public virtual DbSet<InvAstNutrbusn> InvAstNutrbusn { get; set; }
        public virtual DbSet<InvAstPymwys> InvAstPymwys { get; set; }
        public virtual DbSet<InvAstRefTyp> InvAstRefTyp { get; set; }
        public virtual DbSet<InvAstSalesman> InvAstSalesman { get; set; }
        public virtual DbSet<InvAstwrkPeriod> InvAstwrkPeriod { get; set; }
        public virtual DbSet<InvLimit_Qty> InvLimit_Qty { get; set; }
        public virtual DbSet<InvLoddtl> InvLoddtl { get; set; }
        public virtual DbSet<InvLodhdr> InvLodhdr { get; set; }
        public virtual DbSet<InvPoDtl> InvPoDtl { get; set; }
        public virtual DbSet<InvPoHdr> InvPoHdr { get; set; }
        public virtual DbSet<InvQutdtl> InvQutdtl { get; set; }
        public virtual DbSet<InvQuthdr> InvQuthdr { get; set; }
        public virtual DbSet<InvSalReqdtl> InvSalReqdtl { get; set; }
        public virtual DbSet<InvSalReqhdr> InvSalReqhdr { get; set; }
        public virtual DbSet<Lang_Controls> Lang_Controls { get; set; }
        public virtual DbSet<Lang_Forms> Lang_Forms { get; set; }
        public virtual DbSet<LCItemexp> LCItemexp { get; set; }
        public virtual DbSet<LcPymwys> LcPymwys { get; set; }
        public virtual DbSet<MainBranch> MainBranch { get; set; }
        public virtual DbSet<MainBranch2> MainBranch2 { get; set; }
        public virtual DbSet<MainBranchDlv> MainBranchDlv { get; set; }
        public virtual DbSet<MainBranchDlv2> MainBranchDlv2 { get; set; }
        public virtual DbSet<MainCmpnam> MainCmpnam { get; set; }
        public virtual DbSet<MtsChartAc> MtsChartAc { get; set; }
        public virtual DbSet<MtsClosAcnt> MtsClosAcnt { get; set; }
        public virtual DbSet<MtsCostcntr> MtsCostcntr { get; set; }
        public virtual DbSet<MtsCustmr> MtsCustmr { get; set; }
        public virtual DbSet<MtsCustmrOthr> MtsCustmrOthr { get; set; }
        public virtual DbSet<MtsEmpadmin> MtsEmpadmin { get; set; }
        public virtual DbSet<MtsEmpcntrct> MtsEmpcntrct { get; set; }
        public virtual DbSet<MtsFixdAsets> MtsFixdAsets { get; set; }
        public virtual DbSet<MtsItmcatgry> MtsItmcatgry { get; set; }
        public virtual DbSet<MtsItmfsunit> MtsItmfsunit { get; set; }
        public virtual DbSet<MtsItmLoction> MtsItmLoction { get; set; }
        public virtual DbSet<MtsItmMfs> MtsItmMfs { get; set; }
        public virtual DbSet<MtsItmOthr> MtsItmOthr { get; set; }
        public virtual DbSet<MtsItmunit> MtsItmunit { get; set; }
        public virtual DbSet<MtsLC> MtsLC { get; set; }
        public virtual DbSet<MtsSuplir> MtsSuplir { get; set; }
        public virtual DbSet<MtsSuplirOthr> MtsSuplirOthr { get; set; }
        public virtual DbSet<Roles> Roles { get; set; }
        public virtual DbSet<Sec_Controls> Sec_Controls { get; set; }
        public virtual DbSet<Sec_Forms> Sec_Forms { get; set; }
        public virtual DbSet<Sec_GrpMenuPrvldg> Sec_GrpMenuPrvldg { get; set; }
        public virtual DbSet<Sec_MainMenu> Sec_MainMenu { get; set; }
        public virtual DbSet<Sec_Roles> Sec_Roles { get; set; }
        public virtual DbSet<Sec_Users> Sec_Users { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<Users> Users { get; set; }
        public virtual DbSet<FixdDepDtl> FixdDepDtl { get; set; }
        public virtual DbSet<ItmsCatgry> ItmsCatgry { get; set; }
        public virtual DbSet<ItmsExpdt> ItmsExpdt { get; set; }
        public virtual DbSet<Itmskind> Itmskind { get; set; }
        public virtual DbSet<ItmsMfsunit> ItmsMfsunit { get; set; }
        public virtual DbSet<ItmsUnit> ItmsUnit { get; set; }
        public virtual DbSet<LCexpensDtl> LCexpensDtl { get; set; }
        public virtual DbSet<LCexpensHdr> LCexpensHdr { get; set; }
        public virtual DbSet<LcItmTrs> LcItmTrs { get; set; }
        public virtual DbSet<MSreplication_subscriptions> MSreplication_subscriptions { get; set; }
        public virtual DbSet<MSsubscription_agents> MSsubscription_agents { get; set; }
        public virtual DbSet<Sec_UsrMenuPrvldg> Sec_UsrMenuPrvldg { get; set; }
        public virtual DbSet<Adj> Adj { get; set; }
        public virtual DbSet<AllItemInGroup> AllItemInGroup { get; set; }
        public virtual DbSet<CountGroupInstore> CountGroupInstore { get; set; }
        public virtual DbSet<GroupinStore> GroupinStore { get; set; }
        public virtual DbSet<PaymentCert> PaymentCert { get; set; }
        public virtual DbSet<Stloddtlnutrbusn> Stloddtlnutrbusn { get; set; }
        public virtual DbSet<StsQry3> StsQry3 { get; set; }
        public virtual DbSet<Stsqry32> Stsqry32 { get; set; }
        public virtual DbSet<Uniterror> Uniterror { get; set; }
        public virtual DbSet<uniterror20> uniterror20 { get; set; }
        public virtual DbSet<VIEW1> VIEW1 { get; set; }
        public virtual DbSet<VIEW2> VIEW2 { get; set; }
        public virtual DbSet<VIEW3> VIEW3 { get; set; }
        public virtual DbSet<ViewRptCutmReq> ViewRptCutmReq { get; set; }
        public virtual DbSet<viewRptSalQut> viewRptSalQut { get; set; }
        public virtual DbSet<ViewStrqNavi> ViewStrqNavi { get; set; }
        public virtual DbSet<viewStSaldtlNavi> viewStSaldtlNavi { get; set; }
        public virtual DbSet<viwCurGroupcostStkitm> viwCurGroupcostStkitm { get; set; }
        public virtual DbSet<viwCurGroupStkitm> viwCurGroupStkitm { get; set; }
        public virtual DbSet<viwGroupStkitm> viwGroupStkitm { get; set; }
        public virtual DbSet<viwItmUnit> viwItmUnit { get; set; }
        public virtual DbSet<viwStkitm> viwStkitm { get; set; }
    
        public virtual ObjectResult<Nullable<int>> InvLoddtl_Count_New_Ln_No(Nullable<short> doc_Ty, Nullable<long> doc_No)
        {
            var doc_TyParameter = doc_Ty.HasValue ?
                new ObjectParameter("Doc_Ty", doc_Ty) :
                new ObjectParameter("Doc_Ty", typeof(short));
    
            var doc_NoParameter = doc_No.HasValue ?
                new ObjectParameter("Doc_No", doc_No) :
                new ObjectParameter("Doc_No", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InvLoddtl_Count_New_Ln_No", doc_TyParameter, doc_NoParameter);
        }
    
        public virtual ObjectResult<InvLoddtl_Get_By_Doc_No_Result> InvLoddtl_Get_By_Doc_No(Nullable<long> doc_No)
        {
            var doc_NoParameter = doc_No.HasValue ?
                new ObjectParameter("Doc_No", doc_No) :
                new ObjectParameter("Doc_No", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InvLoddtl_Get_By_Doc_No_Result>("InvLoddtl_Get_By_Doc_No", doc_NoParameter);
        }
    
        public virtual ObjectResult<InvLoddtl_Gett_by_Ln_No_Result> InvLoddtl_Gett_by_Ln_No(Nullable<short> doc_Ty, Nullable<long> doc_No, Nullable<short> ln_No)
        {
            var doc_TyParameter = doc_Ty.HasValue ?
                new ObjectParameter("Doc_Ty", doc_Ty) :
                new ObjectParameter("Doc_Ty", typeof(short));
    
            var doc_NoParameter = doc_No.HasValue ?
                new ObjectParameter("Doc_No", doc_No) :
                new ObjectParameter("Doc_No", typeof(long));
    
            var ln_NoParameter = ln_No.HasValue ?
                new ObjectParameter("Ln_No", ln_No) :
                new ObjectParameter("Ln_No", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InvLoddtl_Gett_by_Ln_No_Result>("InvLoddtl_Gett_by_Ln_No", doc_TyParameter, doc_NoParameter, ln_NoParameter);
        }
    
        public virtual int InvLoddtl_Insert_Pur(Nullable<long> doc_No, Nullable<short> cmp_No, Nullable<short> actvty_No, Nullable<short> storeID, Nullable<short> doc_Ty, Nullable<short> ln_No, Nullable<System.DateTime> doc_Dt, string doc_DtAr, Nullable<short> to_Store, Nullable<long> sup_No, Nullable<long> itm_No, Nullable<short> unit_No, Nullable<decimal> qty, Nullable<decimal> itm_Pur, Nullable<decimal> titm_Pur, Nullable<decimal> disc1_Prct, Nullable<decimal> disc2_Prct)
        {
            var doc_NoParameter = doc_No.HasValue ?
                new ObjectParameter("Doc_No", doc_No) :
                new ObjectParameter("Doc_No", typeof(long));
    
            var cmp_NoParameter = cmp_No.HasValue ?
                new ObjectParameter("Cmp_No", cmp_No) :
                new ObjectParameter("Cmp_No", typeof(short));
    
            var actvty_NoParameter = actvty_No.HasValue ?
                new ObjectParameter("Actvty_No", actvty_No) :
                new ObjectParameter("Actvty_No", typeof(short));
    
            var storeIDParameter = storeID.HasValue ?
                new ObjectParameter("StoreID", storeID) :
                new ObjectParameter("StoreID", typeof(short));
    
            var doc_TyParameter = doc_Ty.HasValue ?
                new ObjectParameter("Doc_Ty", doc_Ty) :
                new ObjectParameter("Doc_Ty", typeof(short));
    
            var ln_NoParameter = ln_No.HasValue ?
                new ObjectParameter("Ln_No", ln_No) :
                new ObjectParameter("Ln_No", typeof(short));
    
            var doc_DtParameter = doc_Dt.HasValue ?
                new ObjectParameter("Doc_Dt", doc_Dt) :
                new ObjectParameter("Doc_Dt", typeof(System.DateTime));
    
            var doc_DtArParameter = doc_DtAr != null ?
                new ObjectParameter("Doc_DtAr", doc_DtAr) :
                new ObjectParameter("Doc_DtAr", typeof(string));
    
            var to_StoreParameter = to_Store.HasValue ?
                new ObjectParameter("To_Store", to_Store) :
                new ObjectParameter("To_Store", typeof(short));
    
            var sup_NoParameter = sup_No.HasValue ?
                new ObjectParameter("Sup_No", sup_No) :
                new ObjectParameter("Sup_No", typeof(long));
    
            var itm_NoParameter = itm_No.HasValue ?
                new ObjectParameter("Itm_No", itm_No) :
                new ObjectParameter("Itm_No", typeof(long));
    
            var unit_NoParameter = unit_No.HasValue ?
                new ObjectParameter("Unit_No", unit_No) :
                new ObjectParameter("Unit_No", typeof(short));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(decimal));
    
            var itm_PurParameter = itm_Pur.HasValue ?
                new ObjectParameter("Itm_Pur", itm_Pur) :
                new ObjectParameter("Itm_Pur", typeof(decimal));
    
            var titm_PurParameter = titm_Pur.HasValue ?
                new ObjectParameter("Titm_Pur", titm_Pur) :
                new ObjectParameter("Titm_Pur", typeof(decimal));
    
            var disc1_PrctParameter = disc1_Prct.HasValue ?
                new ObjectParameter("Disc1_Prct", disc1_Prct) :
                new ObjectParameter("Disc1_Prct", typeof(decimal));
    
            var disc2_PrctParameter = disc2_Prct.HasValue ?
                new ObjectParameter("Disc2_Prct", disc2_Prct) :
                new ObjectParameter("Disc2_Prct", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InvLoddtl_Insert_Pur", doc_NoParameter, cmp_NoParameter, actvty_NoParameter, storeIDParameter, doc_TyParameter, ln_NoParameter, doc_DtParameter, doc_DtArParameter, to_StoreParameter, sup_NoParameter, itm_NoParameter, unit_NoParameter, qtyParameter, itm_PurParameter, titm_PurParameter, disc1_PrctParameter, disc2_PrctParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InvLoddtl_Max_New_Ln_No(Nullable<short> doc_Ty, Nullable<long> doc_No)
        {
            var doc_TyParameter = doc_Ty.HasValue ?
                new ObjectParameter("Doc_Ty", doc_Ty) :
                new ObjectParameter("Doc_Ty", typeof(short));
    
            var doc_NoParameter = doc_No.HasValue ?
                new ObjectParameter("Doc_No", doc_No) :
                new ObjectParameter("Doc_No", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InvLoddtl_Max_New_Ln_No", doc_TyParameter, doc_NoParameter);
        }
    
        public virtual int InvLoddtl_Update_Pur(Nullable<long> doc_No, Nullable<short> doc_Ty, Nullable<short> ln_No, Nullable<long> itm_No, Nullable<short> unit_No, Nullable<decimal> qty, Nullable<decimal> itm_Pur, Nullable<decimal> titm_Pur, Nullable<decimal> disc1_Prct, Nullable<decimal> disc2_Prct)
        {
            var doc_NoParameter = doc_No.HasValue ?
                new ObjectParameter("Doc_No", doc_No) :
                new ObjectParameter("Doc_No", typeof(long));
    
            var doc_TyParameter = doc_Ty.HasValue ?
                new ObjectParameter("Doc_Ty", doc_Ty) :
                new ObjectParameter("Doc_Ty", typeof(short));
    
            var ln_NoParameter = ln_No.HasValue ?
                new ObjectParameter("Ln_No", ln_No) :
                new ObjectParameter("Ln_No", typeof(short));
    
            var itm_NoParameter = itm_No.HasValue ?
                new ObjectParameter("Itm_No", itm_No) :
                new ObjectParameter("Itm_No", typeof(long));
    
            var unit_NoParameter = unit_No.HasValue ?
                new ObjectParameter("Unit_No", unit_No) :
                new ObjectParameter("Unit_No", typeof(short));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(decimal));
    
            var itm_PurParameter = itm_Pur.HasValue ?
                new ObjectParameter("Itm_Pur", itm_Pur) :
                new ObjectParameter("Itm_Pur", typeof(decimal));
    
            var titm_PurParameter = titm_Pur.HasValue ?
                new ObjectParameter("Titm_Pur", titm_Pur) :
                new ObjectParameter("Titm_Pur", typeof(decimal));
    
            var disc1_PrctParameter = disc1_Prct.HasValue ?
                new ObjectParameter("Disc1_Prct", disc1_Prct) :
                new ObjectParameter("Disc1_Prct", typeof(decimal));
    
            var disc2_PrctParameter = disc2_Prct.HasValue ?
                new ObjectParameter("Disc2_Prct", disc2_Prct) :
                new ObjectParameter("Disc2_Prct", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InvLoddtl_Update_Pur", doc_NoParameter, doc_TyParameter, ln_NoParameter, itm_NoParameter, unit_NoParameter, qtyParameter, itm_PurParameter, titm_PurParameter, disc1_PrctParameter, disc2_PrctParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InvLodhdr_Count_ID()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InvLodhdr_Count_ID");
        }
    
        public virtual int InvLodhdr_Insert(Nullable<long> doc_No)
        {
            var doc_NoParameter = doc_No.HasValue ?
                new ObjectParameter("Doc_No", doc_No) :
                new ObjectParameter("Doc_No", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InvLodhdr_Insert", doc_NoParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> InvLodhdr_Max_ID()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("InvLodhdr_Max_ID");
        }
    
        public virtual int InvLodhdr_Update(Nullable<long> doc_No, Nullable<short> storeID, string doc_Dt, string doc_DtAr, Nullable<short> pym_No, Nullable<short> curncy_No, Nullable<decimal> exchangeRate, Nullable<long> sup_No, Nullable<short> to_Store, string sup_VchrNo, string sup_Inv, string rcvngPur_Dt, Nullable<int> credit_Days, string pym_Dt, string notes)
        {
            var doc_NoParameter = doc_No.HasValue ?
                new ObjectParameter("Doc_No", doc_No) :
                new ObjectParameter("Doc_No", typeof(long));
    
            var storeIDParameter = storeID.HasValue ?
                new ObjectParameter("StoreID", storeID) :
                new ObjectParameter("StoreID", typeof(short));
    
            var doc_DtParameter = doc_Dt != null ?
                new ObjectParameter("Doc_Dt", doc_Dt) :
                new ObjectParameter("Doc_Dt", typeof(string));
    
            var doc_DtArParameter = doc_DtAr != null ?
                new ObjectParameter("Doc_DtAr", doc_DtAr) :
                new ObjectParameter("Doc_DtAr", typeof(string));
    
            var pym_NoParameter = pym_No.HasValue ?
                new ObjectParameter("Pym_No", pym_No) :
                new ObjectParameter("Pym_No", typeof(short));
    
            var curncy_NoParameter = curncy_No.HasValue ?
                new ObjectParameter("Curncy_No", curncy_No) :
                new ObjectParameter("Curncy_No", typeof(short));
    
            var exchangeRateParameter = exchangeRate.HasValue ?
                new ObjectParameter("ExchangeRate", exchangeRate) :
                new ObjectParameter("ExchangeRate", typeof(decimal));
    
            var sup_NoParameter = sup_No.HasValue ?
                new ObjectParameter("Sup_No", sup_No) :
                new ObjectParameter("Sup_No", typeof(long));
    
            var to_StoreParameter = to_Store.HasValue ?
                new ObjectParameter("To_Store", to_Store) :
                new ObjectParameter("To_Store", typeof(short));
    
            var sup_VchrNoParameter = sup_VchrNo != null ?
                new ObjectParameter("Sup_VchrNo", sup_VchrNo) :
                new ObjectParameter("Sup_VchrNo", typeof(string));
    
            var sup_InvParameter = sup_Inv != null ?
                new ObjectParameter("Sup_Inv", sup_Inv) :
                new ObjectParameter("Sup_Inv", typeof(string));
    
            var rcvngPur_DtParameter = rcvngPur_Dt != null ?
                new ObjectParameter("RcvngPur_Dt", rcvngPur_Dt) :
                new ObjectParameter("RcvngPur_Dt", typeof(string));
    
            var credit_DaysParameter = credit_Days.HasValue ?
                new ObjectParameter("Credit_Days", credit_Days) :
                new ObjectParameter("Credit_Days", typeof(int));
    
            var pym_DtParameter = pym_Dt != null ?
                new ObjectParameter("Pym_Dt", pym_Dt) :
                new ObjectParameter("Pym_Dt", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InvLodhdr_Update", doc_NoParameter, storeIDParameter, doc_DtParameter, doc_DtArParameter, pym_NoParameter, curncy_NoParameter, exchangeRateParameter, sup_NoParameter, to_StoreParameter, sup_VchrNoParameter, sup_InvParameter, rcvngPur_DtParameter, credit_DaysParameter, pym_DtParameter, notesParameter);
        }
    
        public virtual ObjectResult<login_check_Result> login_check(string user_name, string password)
        {
            var user_nameParameter = user_name != null ?
                new ObjectParameter("user_name", user_name) :
                new ObjectParameter("user_name", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<login_check_Result>("login_check", user_nameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<MtsItmunit_Gett_By_Itm_No_Result> MtsItmunit_Gett_By_Itm_No(Nullable<long> itm_No)
        {
            var itm_NoParameter = itm_No.HasValue ?
                new ObjectParameter("Itm_No", itm_No) :
                new ObjectParameter("Itm_No", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MtsItmunit_Gett_By_Itm_No_Result>("MtsItmunit_Gett_By_Itm_No", itm_NoParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> MtsSuplir_get_Credit_Days(Nullable<long> sup_No)
        {
            var sup_NoParameter = sup_No.HasValue ?
                new ObjectParameter("Sup_No", sup_No) :
                new ObjectParameter("Sup_No", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("MtsSuplir_get_Credit_Days", sup_NoParameter);
        }
    
        public virtual int register(string user_name, string password, string email, Nullable<int> group_id)
        {
            var user_nameParameter = user_name != null ?
                new ObjectParameter("user_name", user_name) :
                new ObjectParameter("user_name", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var group_idParameter = group_id.HasValue ?
                new ObjectParameter("group_id", group_id) :
                new ObjectParameter("group_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("register", user_nameParameter, passwordParameter, emailParameter, group_idParameter);
        }
    
        public virtual ObjectResult<select_grid_Result> select_grid(Nullable<int> no, Nullable<int> month_no)
        {
            var noParameter = no.HasValue ?
                new ObjectParameter("no", no) :
                new ObjectParameter("no", typeof(int));
    
            var month_noParameter = month_no.HasValue ?
                new ObjectParameter("month_no", month_no) :
                new ObjectParameter("month_no", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<select_grid_Result>("select_grid", noParameter, month_noParameter);
        }
    
        public virtual ObjectResult<select_grid_costcntr_Result> select_grid_costcntr(Nullable<int> no, Nullable<int> month_no, Nullable<int> cmp_no)
        {
            var noParameter = no.HasValue ?
                new ObjectParameter("no", no) :
                new ObjectParameter("no", typeof(int));
    
            var month_noParameter = month_no.HasValue ?
                new ObjectParameter("month_no", month_no) :
                new ObjectParameter("month_no", typeof(int));
    
            var cmp_noParameter = cmp_no.HasValue ?
                new ObjectParameter("cmp_no", cmp_no) :
                new ObjectParameter("cmp_no", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<select_grid_costcntr_Result>("select_grid_costcntr", noParameter, month_noParameter, cmp_noParameter);
        }
    
        public virtual ObjectResult<select_grid_MtsCustmr_Result> select_grid_MtsCustmr(Nullable<int> no, Nullable<int> month_no, Nullable<int> cmp_no)
        {
            var noParameter = no.HasValue ?
                new ObjectParameter("no", no) :
                new ObjectParameter("no", typeof(int));
    
            var month_noParameter = month_no.HasValue ?
                new ObjectParameter("month_no", month_no) :
                new ObjectParameter("month_no", typeof(int));
    
            var cmp_noParameter = cmp_no.HasValue ?
                new ObjectParameter("cmp_no", cmp_no) :
                new ObjectParameter("cmp_no", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<select_grid_MtsCustmr_Result>("select_grid_MtsCustmr", noParameter, month_noParameter, cmp_noParameter);
        }
    
        public virtual ObjectResult<select_grid_mtssuplier_Result> select_grid_mtssuplier(Nullable<int> no, Nullable<int> month_no, Nullable<int> cmp_no)
        {
            var noParameter = no.HasValue ?
                new ObjectParameter("no", no) :
                new ObjectParameter("no", typeof(int));
    
            var month_noParameter = month_no.HasValue ?
                new ObjectParameter("month_no", month_no) :
                new ObjectParameter("month_no", typeof(int));
    
            var cmp_noParameter = cmp_no.HasValue ?
                new ObjectParameter("cmp_no", cmp_no) :
                new ObjectParameter("cmp_no", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<select_grid_mtssuplier_Result>("select_grid_mtssuplier", noParameter, month_noParameter, cmp_noParameter);
        }
    }
}
